#[RstEncoder]
#[FileOutput]
#message_matcher = "TRUE"
##message_matcher = "Type == 'log.input' && Fields[decoder_type] == 'event'"
#encoder = "RstEncoder"
#path = "/tmp/heka.log"

[SandboxMgr]
type = "SandboxManagerFilter"
working_directory = "%ENV[TMP_DIR]"
message_signer = "tests"
max_filters = 100
[AclSplitter]
type = "HekaFramingSplitter"
[AclSplitter.signer.tests_0]
hmac_key = "testing_key"
[TcpSandboxMgr]
type = "TcpInput"
address = ":6000"
splitter = "AclSplitter"

[JsonDecoder]
type = "SandboxDecoder"
filename = "%ENV[HEKA_HL_DIR]/decoders/decode_json.lua"
[UdpInput]
type = "UdpInput"
address = ":%ENV[JSON_OUTPUT_PORT]"
splitter = "TokenSplitter"
decoder = "JsonDecoder"

[JsonEncoder]
type = "SandboxEncoder"
filename = "%ENV[HEKA_HL_DIR]/encoders/encode_json.lua"
[UdpOutput]
type = "UdpOutput"
message_matcher = "Type == 'heka.sandbox.output' || Type == 'heka.sandbox.output.wind' || Type == 'heka.sandbox.output.all' || Type == 'trserver.metric'"
address = ":%ENV[JSON_INPUT_PORT]"
encoder = "JsonEncoder"

# Tests for encode/decode metrics and events to/from log files
# We cannot load them dynamically because they are used by go udp input/output

[TrserverMetricsDecoder]
type = "SandboxDecoder"
filename = "%ENV[HEKA_HL_DIR]/decoders/decode_trserver_metrics.lua"
    [TrserverMetricsDecoder.config]
    type_output = "trserver.metric"
[TrserverMetricsUdpInput]
type = "UdpInput"
address = ":%ENV[TRSERVER_OUTPUT_PORT]"
splitter = "TokenSplitter"
decoder = "TrserverMetricsDecoder"

[HeaderDecoder]
type = "SandboxDecoder"
filename = "%ENV[HEKA_HL_DIR]/decoders/decode_header.lua"
    [HeaderDecoder.config]
    type_output = "log.input"
[HeaderUdpInput]
type = "UdpInput"
address = ":%ENV[LOG_OUTPUT_PORT]"
splitter = "TokenSplitter"
decoder = "HeaderDecoder"

[HeaderEncoder]
type = "SandboxEncoder"
filename = "%ENV[HEKA_HL_DIR]/encoders/encode_header.lua"
[HeaderUdpOutput]
type = "UdpOutput"
message_matcher = "Type == 'heka.sandbox.log.output'"
address = ":%ENV[LOG_INPUT_PORT]"
encoder = "HeaderEncoder"

[CarbonEncoder]
type = "SandboxEncoder"
filename = "%ENV[HEKA_HL_DIR]/encoders/encode_carbon.lua"
    [CarbonEncoder.config]
    uuid = "d539a1ab-1742-43c5-982e-02fab58283fa"
    hostname = "hl-mc-1-dev"
[CarbonUdpOutput]
type = "UdpOutput"
message_matcher = "Type == 'carbon.output'"
address = ":%ENV[CARBON_INPUT_PORT]"
encoder = "CarbonEncoder"

[RstEncoder]
[FileOutput]
message_matcher = "TRUE"
encoder = "RstEncoder"
path = "/tmp/heka-tests.out"
